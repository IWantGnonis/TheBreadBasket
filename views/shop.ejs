<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Shop - The Bread Basket</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="/css/global.css">
</head>
<body class="bg-[#F8F4E1]">
    <!-- Pass isShop parameter to navbar -->
    <%- include('components/navbar', { isShop: true }) %>

    <!-- Notification Container -->
    <div id="notification-container" class="fixed top-20 left-1/2 transform -translate-x-1/2 z-50 w-full max-w-md"></div>

    <main class="pt-24 px-8 md:px-16">
        <h1 class="text-5xl text-[#543310] font-serif mb-12">Our Products</h1>
        
        <% if (error) { %>
            <div class="bg-[#FBEAE1] border-l-4 border-[#543310] text-[#543310] p-4 mb-8 rounded-r shadow-md" role="alert">
                <div class="flex items-center">
                    <svg class="h-6 w-6 mr-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                    <p class="font-medium"><%= error %></p>
                </div>
            </div>
        <% } %>

        <!-- Filter Section -->
        <div class="mb-8">
            <div class="flex gap-4">
                <button class="px-4 py-2 rounded-full border-2 border-[#543310] text-[#543310] hover:bg-[#543310] hover:text-white transition">All</button>
                <button class="px-4 py-2 rounded-full border-2 border-[#543310] text-[#543310] hover:bg-[#543310] hover:text-white transition">Breads</button>
                <button class="px-4 py-2 rounded-full border-2 border-[#543310] text-[#543310] hover:bg-[#543310] hover:text-white transition">Pastries</button>
                <button class="px-4 py-2 rounded-full border-2 border-[#543310] text-[#543310] hover:bg-[#543310] hover:text-white transition">Cakes</button>
            </div>
        </div>

        <!-- Products Grid -->
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8">
            <% if (products && products.length > 0) { %>
                <% products.forEach(product => { %>
                    <div class="product-card bg-white rounded-xl overflow-hidden shadow-lg hover:shadow-xl transition" data-product-id="<%= product._id %>">
                        <img src="<%= product.image %>" alt="<%= product.name %>" class="w-full h-64 object-cover">
                        <div class="p-4">
                            <h3 class="text-xl font-semibold text-[#543310]"><%= product.name %></h3>
                            <p class="text-gray-600 mt-2"><%= product.description %></p>
                            <div class="flex justify-between items-center mt-4">
                                <span class="text-xl font-bold text-[#543310]">$<%= product.price.toFixed(2) %></span>
                                <button class="add-to-cart px-4 py-2 bg-[#543310] text-white rounded-full hover:bg-[#6B4114] transition">
                                    Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                <% }); %>
            <% } else if (!error) { %>
                <p class="text-gray-600 col-span-full text-center">No products available.</p>
            <% } %>
        </div>
    </main>

    <!-- Reuse your footer from index.ejs -->
    <%- include('components/footer') %>

    <script>
        // Add to cart functionality
        document.querySelectorAll('.add-to-cart').forEach(button => {
            button.addEventListener('click', async (e) => {
                const productCard = e.target.closest('.product-card');
                const productId = productCard.getAttribute('data-product-id');
                
                try {
                    const response = await fetch('/cart/add', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ productId: productId }),
                    });

                    const data = await response.json();
                    if (data.success) {
                        const cartCount = document.querySelector('.cart-count');
                        if (cartCount) {
                            cartCount.textContent = data.cartCount;
                        }
                        // Show success message
                        showNotification('Product added to cart!', 'success');
                    } else {
                        showNotification(data.error || 'Failed to add to cart', 'error');
                    }
                } catch (error) {
                    console.error('Error adding to cart:', error);
                    showNotification('Failed to add product to cart', 'error');
                }
            });
        });

        // Updated Notification function
        function showNotification(message, type) {
            const container = document.getElementById('notification-container');
            const notification = document.createElement('div');
            
            notification.className = `
                mx-4 mb-4 p-4 rounded-lg shadow-lg transform transition-all duration-500 
                ${type === 'success' 
                    ? 'bg-[#543310] text-white' 
                    : 'bg-[#FBEAE1] text-[#543310] border border-[#543310]'
                }
                flex items-center justify-between
            `;

            // Create message container with icon
            const messageContainer = document.createElement('div');
            messageContainer.className = 'flex items-center';
            
            // Add icon based on type
            const icon = document.createElement('span');
            if (type === 'success') {
                icon.innerHTML = `
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"/>
                    </svg>
                `;
            } else {
                icon.innerHTML = `
                    <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"/>
                    </svg>
                `;
            }
            
            messageContainer.appendChild(icon);
            
            const text = document.createElement('span');
            text.textContent = message;
            messageContainer.appendChild(text);
            
            notification.appendChild(messageContainer);

            // Add close button
            const closeButton = document.createElement('button');
            closeButton.className = 'ml-4 hover:opacity-75';
            closeButton.innerHTML = `
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            `;
            closeButton.onclick = () => {
                notification.style.opacity = '0';
                setTimeout(() => notification.remove(), 500);
            };
            notification.appendChild(closeButton);

            // Add to container
            container.appendChild(notification);

            // Animate in
            notification.style.opacity = '0';
            notification.style.transform = 'translateY(-20px)';
            setTimeout(() => {
                notification.style.opacity = '1';
                notification.style.transform = 'translateY(0)';
            }, 10);

            // Auto remove after 5 seconds
            setTimeout(() => {
                if (notification.parentElement) {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateY(-20px)';
                    setTimeout(() => notification.remove(), 500);
                }
            }, 1000);
        }
    </script>
</body>
</html>
